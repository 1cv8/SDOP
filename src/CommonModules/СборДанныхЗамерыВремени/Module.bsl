
Процедура Регламент_СобратьДанныеОЗамерахВремени() Экспорт
	
	Регламент_СобратьДанныеОЗамерахВремениSQL();
	//Регламент_СобратьДанныеОЗамерахВремениCOM();
	
КонецПроцедуры

Процедура Регламент_СобратьДанныеОЗамерахВремениSQL() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИмпортаЗамеровВремени.База1С КАК База1С,
	|	НастройкиИмпортаЗамеровВремени.СобиратьЗамерыВремениSQL КАК СобиратьЗамерыВремениSQL,
	|	НастройкиИмпортаЗамеровВремени.ПараметрыSQL КАК ПараметрыSQL
	|ИЗ
	|	РегистрСведений.НастройкиИмпортаЗамеровВремени КАК НастройкиИмпортаЗамеровВремени
	|ГДЕ
	|	НастройкиИмпортаЗамеровВремени.СобиратьЗамерыВремениSQL
	|	И НЕ НастройкиИмпортаЗамеровВремени.База1С.ПометкаУдаления";
	
	ВыборкаПараметров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПараметров.Следующий() Цикл
		Регламент_СобратьДанныеОЗамерахВремениSQLПоНатройке(ВыборкаПараметров);
	КонецЦикла;
	
КонецПроцедуры

Процедура Регламент_СобратьДанныеОЗамерахВремениSQLПоНатройке(ВыборкаПараметров)
	
	СинхронизироватьКлючевыеОперацииSQL(ВыборкаПараметров.База1С, ВыборкаПараметров.ПараметрыSQL);
	ЗагрузитьЗамерыВремениЧерезSQL(ВыборкаПараметров.База1С, ВыборкаПараметров.ПараметрыSQL);
	
	
КонецПроцедуры

Процедура СинхронизироватьКлючевыеОперацииSQL(База1С, ПараметрыSQL)
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	БазаДанныхSQL = База1С.БазаДаннызSQL;
	Если НЕ ЗначениеЗаполнено(БазаДанныхSQL) Тогда
		Возврат;
	КонецЕсли;
	
	СерверSQL = БазаДанныхSQL.Владелец;
	Если НЕ ЗначениеЗаполнено(СерверSQL) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧКлючевыеОперации = Новый ТаблицаЗначений;
	ТЧКлючевыеОперации.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЧКлючевыеОперации.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТЧКлючевыеОперации.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(17,0, ДопустимыйЗнак.Неотрицательный));
	ТЧКлючевыеОперации.Колонки.Добавить("ЦелевоеВремя", ОбщегоНазначения.ОписаниеТипаЧисло(17,2, ДопустимыйЗнак.Неотрицательный));
	
	ИменаПолей = "Наименование,Имя,Приоритет,ЦелевоеВремя";
	ТЧКлючевыеОперации = КлючевыеОперацииВБазеSQL(БазаДанныхSQL, ПараметрыSQL, ТЧКлючевыеОперации, ИменаПолей);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧКлючевыеОперации", ТЧКлючевыеОперации);
	Запрос.УстановитьПараметр("База1С", База1С);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Т.Наименование КАК СТРОКА(150)) КАК Наименование,
	|	ВЫРАЗИТЬ(Т.Имя КАК СТРОКА(1000)) КАК Имя,
	|	ВЫРАЗИТЬ(Т.Приоритет КАК ЧИСЛО(17, 0)) КАК Приоритет,
	|	ВЫРАЗИТЬ(Т.ЦелевоеВремя КАК ЧИСЛО(17, 2)) КАК ЦелевоеВремя
	|ПОМЕСТИТЬ ВТ_КлючевыеОперации
	|ИЗ
	|	&ТЧКлючевыеОперации КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КлючевыеОперации.Наименование КАК Наименование,
	|	ВТ_КлючевыеОперации.Имя КАК Имя,
	|	ВТ_КлючевыеОперации.Приоритет КАК Приоритет,
	|	ВТ_КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя,
	|	КлючевыеОперации.Ссылка КАК ОперацияСсылка
	|ИЗ
	|	ВТ_КлючевыеОперации КАК ВТ_КлючевыеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперации КАК КлючевыеОперации
	|		ПО ВТ_КлючевыеОперации.Имя = КлючевыеОперации.Имя
	|			И (КлючевыеОперации.База1С = &База1С)";
	
	ВыборкаКлОп = Запрос.Выполнить().Выбрать();
	Пока ВыборкаКлОп.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаКлОп.ОперацияСсылка) Тогда
			КлОперация = Справочники.КлючевыеОперации.СоздатьЭлемент();
			КлОперация.База1С = База1С;
		Иначе
			Продолжить;
			//КлОперация = ВыборкаКлОп.ОперацияСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КлОперация, ВыборкаКлОп);
		
		КлОперация.Имя = СокрЛП(КлОперация.Имя);
		
		КлОперация.ОбменДанными.Загрузка = Истина;
		КлОперация.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючевыеОперацииВБазеSQL(БазаДанныхSQL, ПараметрыSQL, ТЧ_SQL, ИменаПолей) Экспорт
	
	СерверSQL = БазаДанныхSQL.Владелец;
	
	ТекстЗапроса_SQL =
	"SELECT 
	|	_Description as [Наименование],
	|	%КлючевыеОперацииРеквизитИмя% AS [Имя],
	|	%КлючевыеОперацииРеквизитПриоритет% AS [Приоритет],
	|	%КлючевыеОперацииРеквизитЦелевоеВремя% AS [ЦелевоеВремя]
	|FROM [%ИмяБазы%].[dbo].[%ТаблицаКлючевыеОперации%] as src WITH(NOLOCK)
	|";
	
	ТекстЗапроса_SQL = СтрЗаменить(ТекстЗапроса_SQL, "%ИмяБазы%", БазаДанныхSQL.Наименование);
	
	ИменаРеквизитов = "ТаблицаКлючевыеОперации,КлючевыеОперацииРеквизитИмя,КлючевыеОперацииРеквизитПриоритет,КлючевыеОперацииРеквизитЦелевоеВремя,КлючевыеОперацииРеквизитДлительная";
	Для Каждого ИмяРеквизита Из СтрРазделить(ИменаРеквизитов, ",") Цикл
		ТекстЗапроса_SQL = СтрЗаменить(ТекстЗапроса_SQL, "%" + ИмяРеквизита + "%", ПараметрыSQL[ИмяРеквизита]);
	КонецЦикла;
	
	Connection = РаботаСSQLСервером.СоединениеССерверомSQL(СерверSQL);
	RecordSet = РаботаСSQLСервером.РезультатЗапросаSQL(Connection, ТекстЗапроса_SQL);
	//ТЧ_SQL = РаботаСSQLСервером.ВсеЗаписиВыборки(RecordSet);

	Если РаботаСSQLСервером.ВВыборкеЕстьЗаписи(RecordSet) Тогда
	
		Пока РаботаСSQLСервером.СледующаяЗаписьВыборки(RecordSet) Цикл
			
			СтрокаТЧ = ТЧ_SQL.Добавить();
			ЗначенияПолей = РаботаСSQLСервером.ЗначениеПолейВыборки(RecordSet, ИменаПолей);
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЗначенияПолей);
			
			Попытка
				RecordSet.MoveNext();
			Исключение
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	RecordSet.Close();
	
	РаботаСSQLСервером.ЗакрытьСоединение(Connection);
	
	Возврат ТЧ_SQL;
	
КонецФункции


Процедура ЗагрузитьЗамерыВремениЧерезSQL(База1С, ПараметрыSQL)
	
	Если НЕ ЗначениеЗаполнено(База1С) Тогда
		Возврат;
	КонецЕсли;
	
	БазаДанныхSQL = База1С.БазаДаннызSQL;
	Если НЕ ЗначениеЗаполнено(БазаДанныхSQL) Тогда
		Возврат;
	КонецЕсли;
	
	СерверSQL = БазаДанныхSQL.Владелец;
	Если НЕ ЗначениеЗаполнено(СерверSQL) Тогда
		Возврат;
	КонецЕсли;
	
	КэшВсеКО = КэшВсеКлючевыеОперации(База1С);
	
	ИменаПолей = "ДатаНачалаЗамера,НомерСеанса,ДатаЗаписиНачалоЧаса,ВремяВыполнения,ВесЗамера,Комментарий,ДатаЗаписи,ДатаОкончания,Пользователь,ДатаЗаписиЛокальная,ВыполненСОшибкой";
	ТЧЗамеры = РегистрыСведений.ЗамерыВремени.СоздатьНаборЗаписей().Выгрузить(, ИменаПолей);
	
	ТЧЗамеры.Колонки.Добавить("КлючеваяОперацияИмя", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ИменаПолей = ИменаПолей + ",КлючеваяОперацияИмя";

	ДатаНачала = ДатаНачалаИмпортаЗамеров(База1С);
	ВремяНачала = ВремяВМилисекундах(ДатаНачала);
	ВремяОкончания = ВремяНачала;
	
	ДатаМаксКон = ТекущаяУниверсальнаяДата() - 3600; // Макимальное время, чтобы успеть закончить замер времени и транзакцию
	ВремяМаксКон = ВремяВМилисекундах(ДатаМаксКон);
	
	ЗамерыВремениВБазеSQL(БазаДанныхSQL, ПараметрыSQL, ВремяНачала, ВремяМаксКон, ТЧЗамеры, ИменаПолей);
	
	Сч = 0;
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаЗамера Из ТЧЗамеры Цикл
		
		КлючеваяОперация		= КэшВсеКО.Получить(СокрЛП(СтрокаЗамера.КлючеваяОперацияИмя));
		ДатаНачалаЗамера		= СтрокаЗамера.ДатаНачалаЗамера;
		НомерСеанса				= СтрокаЗамера.НомерСеанса;
		ДатаЗаписиНачалоЧаса	= СтрокаЗамера.ДатаЗаписиНачалоЧаса;
		
		Если НЕ ЗначениеЗаполнено(ДатаЗаписиНачалоЧаса) Тогда
			// Тут может падать при запуске в регл задании без пользователя.
			// Какая-то странность с настройкой конвертации даты SQL в дате сеанса пользователя.
			ВызватьИсключение "Не заполнен параметр замера: ""ДатаЗаписиНачалоЧаса""";
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ДатаНачалаЗамера) Тогда
			ВызватьИсключение "Не заполнен параметр замера: ""ДатаНачалаЗамера""";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КлючеваяОперация) Тогда
			ТекстОшибки = "Не найдена ключевая операция: """ + КлючеваяОперация + """";
			ВызватьИсключение (ТекстОшибки);
		КонецЕсли;
		
		ВремяОкончания = Макс(ВремяОкончания, ДатаНачалаЗамера);
		
		НЗ = РегистрыСведений.ЗамерыВремени.СоздатьНаборЗаписей();
		НЗ.Отбор.КлючеваяОперация.Установить(КлючеваяОперация);
		НЗ.Отбор.ДатаНачалаЗамера.Установить(ДатаНачалаЗамера);
		НЗ.Отбор.НомерСеанса.Установить(НомерСеанса);
		НЗ.Отбор.ДатаЗаписиНачалоЧаса.Установить(ДатаЗаписиНачалоЧаса);
		
		СтрокаНовогоЗамера = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоЗамера, СтрокаЗамера);
		
		СтрокаНовогоЗамера.КлючеваяОперация		= КлючеваяОперация;
		СтрокаНовогоЗамера.ДатаНачалаЗамера		= ДатаНачалаЗамера;
		СтрокаНовогоЗамера.НомерСеанса			= НомерСеанса;
		СтрокаНовогоЗамера.ДатаЗаписиНачалоЧаса	= ДатаЗаписиНачалоЧаса;
		
		//Если (ДатаНачалаЗамера - ВремяНачала) > 1000 Тогда
		//	НЗ.ОбменДанными.Загрузка = Истина;
		//	НЗ.Записать(Ложь);
		//Иначе
			НЗ.Записать(Истина);
		//КонецЕсли;
		
		Сч = Сч + 1;
		Если Сч % 250 = 0 Тогда
			ЗаписатьДатуОкончанияИмпортаЗамеров(База1С, ВремяОкончания);
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Функция ЗамерыВремениВБазеSQL(БазаДанныхSQL, ПараметрыSQL, ВремяНачала, ВремяОкончания, ТЧ_SQL, ИменаПолей) Экспорт
	
	СерверSQL = БазаДанныхSQL.Владелец;
	
	ТекстЗапроса_SQL =
	"SELECT TOP 500000
	|	src_keys.%КлючевыеОперацииРеквизитИмя% AS [КлючеваяОперацияИмя],
	|	%ЗамерыВремениРеквизитДатаНачалаЗамера% AS [ДатаНачалаЗамера],
	|	%ЗамерыВремениРеквизитНомерСеанса% AS [НомерСеанса],
	|	%ЗамерыВремениРеквизитДатаЗаписиНачалоЧаса% AS [ДатаЗаписиНачалоЧаса],
	|	%ЗамерыВремениРеквизитВремяВыполнения% AS [ВремяВыполнения],
	|	%ЗамерыВремениРеквизитВесЗамера% AS [ВесЗамера],
	|	%ЗамерыВремениРеквизитКомментарий% AS [Комментарий],
	|	%ЗамерыВремениРеквизитДатаЗаписи% AS [ДатаЗаписи],
	|	%ЗамерыВремениРеквизитДатаОкончания% AS [ДатаОкончания],
	|	%ЗамерыВремениРеквизитПользователь% AS [Пользователь],
	|	%ЗамерыВремениРеквизитДатаЗаписиЛокальная% AS [ДатаЗаписиЛокальная],
	|	%ЗамерыВремениРеквизитВыполненСОшибкой% AS [ВыполненСОшибкой]
	|FROM [%ИмяБазы%].[dbo].%ТаблицаЗамерыВремени% as src WITH(NOLOCK)
	|LEFT JOIN [%ИмяБазы%].[dbo].%ТаблицаКлючевыеОперации% as src_keys WITH(NOLOCK)
	|	ON src.%ЗамерыВремениРеквизитКлючеваяОперация% = src_keys.[_IDRRef]
	|WHERE
	|	src.%ЗамерыВремениРеквизитДатаНачалаЗамера% > %_Period_begin%
	|	and src.%ЗамерыВремениРеквизитДатаНачалаЗамера% < %_Period_end%
	|	and src_keys.%КлючевыеОперацииРеквизитИмя% is not null
	|
	|ORDER BY
	|	[ДатаНачалаЗамера]
	|";
	
	ТекстЗапроса_SQL = СтрЗаменить(ТекстЗапроса_SQL, "%ИмяБазы%", БазаДанныхSQL.Наименование);
	ТекстЗапроса_SQL = СтрЗаменить(ТекстЗапроса_SQL, "%_Period_begin%", Формат(ВремяНачала, "ЧГ="));
	ТекстЗапроса_SQL = СтрЗаменить(ТекстЗапроса_SQL, "%_Period_end%", Формат(ВремяОкончания, "ЧГ="));
	
	//// Романов Не работает в регл задании - странный формат (((
	//ШаблонПоляДата = "convert(varchar,DateADD(year,-2000,[%ИмяПоля%]),104)+' '+convert(varchar,[%ИмяПоля%],108)";
	ШаблонПоляДата = "DateADD(year,-2000,[%ИмяПоля%])";
	
	ИменаРеквизитов = "ТаблицаКлючевыеОперации,ТаблицаЗамерыВремени,КлючевыеОперацииРеквизитИмя";
	Для Каждого ИмяРеквизита Из СтрРазделить(ИменаРеквизитов, ",") Цикл
		
		ТекстЗапроса_SQL = СтрЗаменить(ТекстЗапроса_SQL, "%" + ИмяРеквизита + "%", "[" + ПараметрыSQL[ИмяРеквизита] + "]");
		
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из Метаданные.Справочники.ПараметрыИмпортаЗамеровВремениSQL.Реквизиты Цикл
		
		ИмяРеквизита = МетаданныеРеквизита.Имя;
		Если СтрНачинаетсяС(ИмяРеквизита, "ЗамерыВремениРеквизит") Тогда
			
			ШаблонПоля = "[%ИмяПоля%]";
			ИмяКолонки = СтрЗаменить(ИмяРеквизита, "ЗамерыВремениРеквизит", "");
			Если ТЧ_SQL.Колонки.Найти(ИмяКолонки) <> Неопределено
				И ТЧ_SQL.Колонки[ИмяКолонки].ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				//ШаблонПоля = "convert(varchar,DateADD(year,-2000,[%ИмяПоля%]),104) +' '+ convert(varchar,[%ИмяПоля%],108)";
				ШаблонПоля = "DateADD(year,-2000,[%ИмяПоля%])";
			КонецЕсли;
			
			ТекстПоля = СтрЗаменить(ШаблонПоля, "%ИмяПоля%", ПараметрыSQL[ИмяРеквизита]);
			ТекстЗапроса_SQL = СтрЗаменить(ТекстЗапроса_SQL, "%" + ИмяРеквизита + "%", ТекстПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	Connection = РаботаСSQLСервером.СоединениеССерверомSQL(СерверSQL);
	RecordSet = РаботаСSQLСервером.РезультатЗапросаSQL(Connection, ТекстЗапроса_SQL);
	//ТЧ_SQL = РаботаСSQLСервером.ВсеЗаписиВыборки(RecordSet);

	Если РаботаСSQLСервером.ВВыборкеЕстьЗаписи(RecordSet) Тогда
	
		Пока РаботаСSQLСервером.СледующаяЗаписьВыборки(RecordSet) Цикл
			
			СтрокаТЧ = ТЧ_SQL.Добавить();
			ЗначенияПолей = РаботаСSQLСервером.ЗначениеПолейВыборки(RecordSet, ИменаПолей);
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЗначенияПолей);
			
			Если ТипЗнч(ЗначенияПолей.ДатаЗаписи) = Тип("Строка") Тогда
				СтрокаТЧ.ДатаЗаписи = РаботаСSQLСервером.ДатаИзSQLСтроки(ЗначенияПолей.ДатаЗаписи);
			КонецЕсли;
			Если ТипЗнч(ЗначенияПолей.ДатаЗаписиЛокальная) = Тип("Строка") Тогда
				СтрокаТЧ.ДатаЗаписиЛокальная = РаботаСSQLСервером.ДатаИзSQLСтроки(ЗначенияПолей.ДатаЗаписиЛокальная);
			КонецЕсли;
			Если ТипЗнч(ЗначенияПолей.ДатаЗаписиНачалоЧаса) = Тип("Строка") Тогда
				СтрокаТЧ.ДатаЗаписиНачалоЧаса = РаботаСSQLСервером.ДатаИзSQLСтроки(ЗначенияПолей.ДатаЗаписиНачалоЧаса);
			КонецЕсли;
			
			Попытка
				RecordSet.MoveNext();
			Исключение
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	RecordSet.Close();
	
	РаботаСSQLСервером.ЗакрытьСоединение(Connection);
	
	Возврат ТЧ_SQL;
	
КонецФункции

Функция ДатаНачалаИмпортаЗамеров(База1С)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("База1С", База1С);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГраницыИмпортаЗамеровПроизводительности.ДатаЗагружено КАК ДатаЗагружено
	|ИЗ
	|	РегистрСведений.ГраницыИмпортаЗамеровПроизводительности КАК ГраницыИмпортаЗамеровПроизводительности
	|ГДЕ
	|	ГраницыИмпортаЗамеровПроизводительности.База1С = &База1С";
	
	ДатаНачала = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНачала = Выборка.ДатаЗагружено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ДобавитьМесяц(ТекущаяУниверсальнаяДата(),-3);
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции

Процедура ЗаписатьДатуОкончанияИмпортаЗамеров(База1С, ВремяОкончания)
	
	МЗ = РегистрыСведений.ГраницыИмпортаЗамеровПроизводительности.СоздатьМенеджерЗаписи();
	МЗ.База1С = База1С;
	
	МЗ.Прочитать();
	
	МЗ.База1С = База1С;
	МЗ.ДатаЗагружено = ДатаИзВремениВМилисекундах(ВремяОкончания);
	
	МЗ.Записать(Истина);
	
КонецПроцедуры



Функция ВремяВМилисекундах(Знач ДатаВход)
	
	Результат = ДатаВход - Дата(1,1,1, 0,0,0);
	Результат = Результат * 1000;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзВремениВМилисекундах(Знач ВремяВход)
	
	ВремяВход = Цел(ВремяВход/1000);
	Результат = Дата(1,1,1, 0,0,0) + ВремяВход;
	
	Возврат Результат;
	
КонецФункции

Функция КэшВсеКлючевыеОперации(База1С)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("База1С", База1С);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК Ссылка,
	|	КлючевыеОперации.Имя КАК Имя
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	КлючевыеОперации.База1С = &База1С";
	
	Результат = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(СокрЛП(Выборка.Имя), Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

